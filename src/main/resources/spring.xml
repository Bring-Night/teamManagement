<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	   http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	   http://www.springframework.org/schema/aop
	   http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	   http://www.springframework.org/schema/context
	   http://www.springframework.org/schema/context/spring-context-4.0.xsd
	   http://www.springframework.org/schema/tx
	   http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	   http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.0.xsd">
	
	<!--spring 扫包   @Service .....-->
	<context:component-scan base-package="com.zhy.team">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
    <context:annotation-config/>
	
	<!-- 引入jdbc配置文件 -->
	<!-- 加载jdbc.properties -->
	<!-- <bean id="propertyConfigurer"  
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
        <property name="location" value="classpath:jdbc.properties" />
    </bean>  -->
	
	 <!-- 引入jdbc配置文件  redis配置文件 -->
	<!-- 加载jdbc.properties -->
	<bean id="propertyConfigurer"  
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations" >
        <list>
            <value>classpath:jdbc.properties</value>
            <value>classpath:redis.properties</value>
        </list>              
        </property>
    </bean>  
	
	<!-- druid -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
	
		<property name="url" value="${mysql.url}"></property>
		<property name="username" value="${mysql.username}" />
		<property name="password" value="${mysql.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="20" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="100" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 1 from dual" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />
		-->
		<!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
		<property name="filters" value="stat" />
	</bean>
	
	<!-- redis 
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">  
        <property name="maxIdle" value="${redis.maxIdle}" />  
        <property name="maxActive" value="${redis.maxActive}" />  
        <property name="maxWait" value="${redis.maxWait}" />  
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />  
    </bean>
	-->
	
	<!-- redis  -->
	<import resource="springredis.xml"/>
	<!--mybatis  sessionFactory配置-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="mapperLocations" value="classpath:com/zhy/team/dao/*.xml"/>
		<property name="typeAliasesPackage" value="com.zhy.team.bean"/>
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageInterceptor">
			        <property name="properties">
			        <!-- 使用下面的方式配置参数，一行配置一个  -->
			          <value>
			            helperDialect=mysql
			            offsetAsPageNum=true
			            supportMethodsArguments=true
			          </value>
			        </property>
			     </bean>
			</array>
		</property>
	</bean>
	<!-- 扫包  -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- <property name="sqlSessionFactory" ref="sqlSessionFactory"></property> -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="basePackage" value="com.zhy.team.dao"/>
	</bean>
	
	<!-- 配置事物 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*"  read-only="true"/>
			<tx:method name="find*" read-only="true"/>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="login*" propagation="REQUIRED" />
			<tx:method name="setting*" propagation="REQUIRED" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>
 	
	<aop:config>
		<aop:pointcut id="userServiceOperation1"
			expression="execution(* com.zhy.team.service..*.*(..)))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="userServiceOperation1"/>
	</aop:config>
	
</beans>

  